
InTerminator = CR LF;
OutTerminator = CR;

# send 'address,command'

getID {
    out "\$1,SYSID"; 

    in "";          # read up to first terminator, which removes "CR LF" from start of reply, then pass on remaining string
    in "%d";        # read a series of integers (the returned address) and then pass back to DB
}

# Get all PSU information
#
# address, heat on (1=on, 0=off), set point (A), readback tank (A), power (W), frequency (kHz), 
# count down timer (msec.), count up timer (msec.)
#
# Example reply: <CR><LF>1,1,280.0,280.0,1006,286,0,972<CR><LF>
#
getData {
    out "\$1,RDATA";

    in "";                                  # Read first 'termination' character
    in "%d,"                                # PSU address  -  NOT redirected, but value returned to calling record
       "%(\$2HEAT:RBV:RAW.A)!1d,"           # Heat on (0=Off, 1=On)
       "%(\$2TANK:CURR:SP:RBV:RAW.A)f,"     # Tank current Set point (A)
       "%(\$2TANK:CURR:RBV:RAW.A)f,"        # Tank current (A)
       "%(\$2POWER:RBV:RAW.A)d,"            # Power (W)
       "%(\$2FREQ:RBV:RAW.A)d,"             # Frequency (kHz)
       "%(\$2TIME:DOWN:RBV:RAW.A)d,"        # Count down timer (ms)
       "%(\$2TIME:UP:RBV:RAW.A)d";          # Count up timer (ms)
}

getStatus {
    out "\$1,STAT";

    in "";                                      # Read first 'termination' character
    in "%f,"                                    # Mains voltage (V)  -  NOT redirected, but value returned to calling record
       "%(\$2TIME:TOTAL:RBV:RAW.A)f,"           # Total time (s)
       "%(\$2POWER:MAX:RBV:RAW.A)f,"            # Maximum power out (W)
       "%(\$2TEMP:HEATSINK:MAX:RBV:RAW.A)f,"    # Maximum heat sink temperature (C)
       "%(\$2TEMP:ENCLOSURE:MAX:RBV:RAW.A)f";   # Maximum enclosure temperature (C)
}

getRawData {
    out "\$1,RDATA";

    in "";
    in "%s";
}

getRawStatus {
    out "\$1,STAT";

    in "";
    in "%s";
}
